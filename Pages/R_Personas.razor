@page "/Personas"
@page "/Personas/{PersonaId:int}"
@using RegistroPrestamos.Models;
@using RegistroPrestamos.BLL;

@inject IToastService toast

<EditForm Model="persona" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">

        <div class="card-header text-center bg-info text-white">
            <h3>Registro de Personas</h3>
        </div>

        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>PersonaId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="persona.PersonaId" class="form-control col-1" />
                                <ValidationMessage For="(() => persona.PersonaId)"></ValidationMessage>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-info input-group-text"
                                    @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-row">

                    <div class="form-group col-md-12">
                        <label>Nombre</label>
                        <InputText @bind-Value="persona.Nombre" class="form-control" placeholder="Digite un nombre" />
                        <ValidationMessage For="@(() => persona.Nombre)" />
                    </div>

                        <div class="form-group col-md-6">
                            <label>Tel&eacutefono</label>
                            <InputText @bind-Value="persona.Telefono" class="form-control" placeholder="Digite un numero de teléfono"/>
                            <ValidationMessage For="@(() => persona.Telefono)" />
                        </div>

                    <div class="form-group col-md-6">
                        <label>C&eacutedula</label>
                        <InputText @bind-Value="persona.Cedula" class="form-control "placeholder="Digite una cédula" />
                        <ValidationMessage For="@(() => persona.Cedula)" />
                    </div>

                    <div class="form-group col-md-6">
                        <label>Direcci&oacuten</label>
                        <InputText @bind-Value="persona.Direccion" class="form-control" placeholder="Digite una direccion" />
                        <ValidationMessage For="@(() => persona.Direccion)" />
                    </div>

                    <div class="form group col-md-4">
                        <label>Fecha</label>
                        <InputDate @bind-Value="persona.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => persona.Fecha)" />
                    </div>


                    <div class="form-group col-md-2">
                        <label>Balance</label>
                        <InputNumber @bind-Value="persona.Balance" readonly class="form-control" />
                        <ValidationMessage For="@(() => persona.Balance)" />
                    </div>

                </div>
            </form>
        </div>

        <div class="card-footer ">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>

    </div>
</EditForm>

@code{
    Personas persona = new Personas();

    [Parameter]
    public int PersonaId { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (PersonaId > 0)
        {
            var auxPersona = PersonasBLL.Buscar(PersonaId);
            if (auxPersona != null)
                this.persona = auxPersona;
            else
                toast.ShowWarning("No encontrado.");
        }
    }

    public void Nuevo()
    {

        this.persona = new Personas();
    }

    private void Buscar()
    {
        var encontrado = PersonasBLL.Buscar(persona.PersonaId);
        if (encontrado != null)
            this.persona = encontrado;
        else
        {
            toast.ShowWarning("No encontrado");
        }

    }
    private void Guardar()
    {
        bool paso;
        paso = PersonasBLL.Guardar(persona);

        if (paso)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
        {
            toast.ShowError("No fue posible guardar");
        }

    }
    private void Eliminar()
    {
        bool elimino;

        elimino = PersonasBLL.Eliminar(persona.PersonaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
        {
            toast.ShowError("No fue posible eliminar");
        }
    }
}